{
  "name": "node-vibrant",
  "version": "1.1.2",
  "description": "Node.js port of vibrant.js. Get color variations from an image. Basically a JS port of Android's Palette",
  "main": "lib/index.js",
  "browser": "lib/browser.js",
  "directories": {
    "example": "examples"
  },
  "dependencies": {
    "jimp": "^0.2.4",
    "quantize": "^1.0.1"
  },
  "devDependencies": {
    "browserify": "^10.2.4",
    "chai": "^3.0.0",
    "coffee-script": "^1.9.3",
    "gulp": "^3.9.0",
    "gulp-bench": "^1.1.0",
    "gulp-coffee": "^2.3.1",
    "gulp-heap": "^1.1.2",
    "gulp-mocha": "^2.1.0",
    "gulp-uglify": "^1.2.0",
    "vinyl-buffer": "^1.0.0",
    "vinyl-source-stream": "^1.1.0"
  },
  "scripts": {
    "test": "gulp test"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/akfish/node-vibrant.git"
  },
  "keywords": [
    "color",
    "detection",
    "varation",
    "image",
    "picture",
    "canvas",
    "vibrant",
    "muted",
    "colour"
  ],
  "author": {
    "name": "akfish"
  },
  "license": "MIT",
  "readme": "# node-vibrant\nExtract prominent colors from an image.\n\n`node-vibrant` is a node.js port of [Vibrant.js](https://github.com/jariz/vibrant.js), which is a javascript port of the [awesome Palette class](https://developer.android.com/reference/android/support/v7/graphics/Palette.html) in the Android support library.\n\n## Features\n\n* Identical (asynchronous) API for both node.js and browser environment\n* Support browserify\n* Consistent results (*)\n\n_* The results is consistent within each user's browser instance regardelss of visible region or display size of the image, unlike the original `vibrant.js` implementation._\n\n_However, due to the very nature of HTML5 canvas element, image rendering is platform/machine-dependent. Thus the resulting swatches in browser environment varies and may not be the same as in node.js nor in another machine. See [Canvas Fingerprinting](https://en.wikipedia.org/wiki/Canvas_fingerprinting)._\n\n## Install\n\n```bash\n$ npm install node-vibrant\n```\n\n## Usage\n\n### node.js / browserify\n\n```coffee\n# Use in node.js or bunddle with browserify\nVibrant = require('node-vibrant')\n\nv = new Vibrant('path/to/image', opts)\nv.getSwatches (err, swatches) ->\n  console.log(swatches)\n```\n\n### Browser\n\n```html\n<!-- Debug version -->\n<script src=\"/path/to/dist/vibrant.js\"></script>\n<!-- Uglified version -->\n<script src=\"/path/to/dist/vibrant.min.js\"></script>\n\n<script>\n  // Use `Vibrant` in script\n  // Vibrant is exported to global. window.Vibrant === Vibrant\n  var v = new Vibrant('/path/to/image', opts);\n  // ... same as in node.js\n</script>\n```\n\n\n## References\n\n### `Vibrant.constructor(imagePath, opts)`\n\nName | Type | Description\n---- | ---- | --------------\n`imagePath` | string | Path to image file\n`opts` | object | Options (optional)\n\n#### `opts`\n\nField | Default | Description\n----- | ------- | -----------\n`colorCount` | `64` | amount of colors in initial palette from which the swatches will be generated\n`quality` | `5` | 1 is highest, but takes way more processing\n\n\n\n### `Vibrant.getSwatches(cb)`\n\nName | Type | Description\n---- | ---- | --------------\n`cb` | function | callback function\n\n#### `cb(err, swatches)`\n\nName | Type | Description\n---- | ---- | --------------\n`err` | object | Error (if thrown)\n`swatches` | object | Resulting swatches\n\n## Intentional Deviation From `vibrant.js`\n\n* `node-vibrant` takes image path, not the image object as parameter for the obvious reason that node.js environment has no access to HTML DOM object.\n* `node-vibrant` provides asynchronous API since most node.js image processing library is asynchronous. And the original `vibrant.js` workflow is asynchronous any way (though you will have to handle the image loading yourself, while `node-vibrant` does it for you).\n* `node-vibrant` uses one single `opts` object to hold all options for future expansions. And it feels more node.js-like.\n* `node-vibrant` uses method call to initiate image processing instead of constructor so that developers can use it with `Promise`.\n\n## Benchmark\n\nRun `gulp benchmark` to see how `opts` value affects performance.\n\n```\n[12:53:52] Running suite node-vibrant colorCount benchmark (quality = 5)\n[12:53:58]    Color count: 2 x 9.83 ops/sec ±2.67% (52 runs sampled)\n[12:54:04]    Color count: 4 x 9.52 ops/sec ±1.02% (50 runs sampled)\n[12:54:10]    Color count: 8 x 9.01 ops/sec ±1.39% (47 runs sampled)\n[12:54:16]    Color count: 16 x 8.29 ops/sec ±0.95% (44 runs sampled)\n[12:54:22]    Color count: 32 x 7.95 ops/sec ±0.85% (43 runs sampled)\n[12:54:28]    Color count: 64 x 7.23 ops/sec ±2.17% (39 runs sampled)\n[12:54:33]    Color count: 128 x 7.42 ops/sec ±1.00% (40 runs sampled)\n[12:54:39]    Color count: 256 x 6.36 ops/sec ±2.54% (35 runs sampled)\n[12:54:39] Fastest test is Color count: 2 at 1.03x faster than Color count: 4\n[12:54:39] Running suite node-vibrant quality benchmark (colorCount = 64)\n[12:54:46]    Quality: 1 x 3.11 ops/sec ±5.63% (20 runs sampled)\n[12:54:53]    Quality: 2 x 3.53 ops/sec ±3.11% (22 runs sampled)\n[12:54:59]    Quality: 3 x 3.95 ops/sec ±1.98% (24 runs sampled)\n[12:55:05]    Quality: 4 x 4.29 ops/sec ±1.24% (26 runs sampled)\n[12:55:12]    Quality: 5 x 4.44 ops/sec ±0.97% (26 runs sampled)\n[12:55:18]    Quality: 6 x 4.55 ops/sec ±1.14% (27 runs sampled)\n[12:55:24]    Quality: 7 x 4.60 ops/sec ±0.77% (27 runs sampled)\n[12:55:30]    Quality: 8 x 4.59 ops/sec ±1.41% (27 runs sampled)\n[12:55:30] Fastest tests are Quality: 7,Quality: 8 at 1.00x faster than Quality: 8\n[12:55:30] Finished 'benchmark' after 1.63 min\n```\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/akfish/node-vibrant/issues"
  },
  "homepage": "https://github.com/akfish/node-vibrant",
  "_id": "node-vibrant@1.1.2",
  "_from": "node-vibrant@~1.1.2"
}
