{
  "name": "jimp",
  "version": "0.2.4",
  "description": "An image processing library written entirely in JavaScript (i.e. zero external or native dependencies).",
  "main": "jimp.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [
    "image",
    "image processing",
    "image manipulation",
    "png",
    "jpg",
    "jpeg",
    "bmp",
    "resize",
    "scale",
    "crop"
  ],
  "author": {
    "name": "Oliver Moran",
    "email": "oliver.moran@gmail.com"
  },
  "license": "MIT",
  "dependencies": {
    "bmp-js": "0.0.1",
    "file-type": "^2.6.0",
    "jpeg-js": "^0.1.1",
    "mime": "^1.3.4",
    "node-png": "^0.4.3",
    "read-chunk": "^1.0.1",
    "stream-to-buffer": "^0.1.0"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/oliver-moran/jimp.git"
  },
  "bugs": {
    "url": "https://github.com/oliver-moran/jimp/issues"
  },
  "readme": "# Jimp #\n\nThe \"JavaScript Image Manipulation Program\" :-)\n\nAn image processing library for Node written entirely in JavaScript, with zero external or native dependencies.\n\nExample usage:\n\n    var Jimp = require(\"jimp\");\n\n    // open a file called \"lenna.png\"\n    var lenna = new Jimp(\"lenna.png\", function (err, image) {\n        this.resize(512, 512) // resize\n            .write(\"lenna-small.png\") // save\n            .quality(60) // set JPEG quality\n            .write(\"lenna-small.jpg\") // save as JPEG\n            .greyscale() // set greyscale\n            .write(\"lena-small-bw.png\") // save again\n            .crop(128, 192, 256, 128) // crop\n            .write(\"lena-small-bw-cropped.png\"); // save again\n    });\n\n## Basic usage ##\n\nThe Jimp constructor takes two arguments, the path to a PNG, JPEG or BMP image and a Node-style callback:\n\n    var image = new Jimp(\"./path/to/image.jpg\", function (err, image) {\n        // this is the image\n    });\n\nOnce the callback has fired, the following methods can be called on the image:\n\n    image.crop( x, y, w, h ); // crop to the given region\n    image.invert(); // invert the image colours\n    image.flip( horz, vert); // flip the image horizontally or vertically\n    image.gaussian( r ); // Gaussian blur the image by r pixels (VERY slow)\n    image.blur( r ); // fast blur the image by r pixels\n    image.greyscale(); // remove colour from the image\n    image.sepia(); // apply a sepia wash to the image\n    image.opacity( f ); // multiply the alpha channel by each pixel by the factor f, 0 - 1\n    image.resize( w, h ); // resize the image\n    image.scale( f ); // scale the image by the factor f\n    image.rotate( deg ); // rotate the image clockwise by a number of degrees (rounded to multiples of 90)\n    image.blit( src, x, y ); // blit the image with another Jimp image at x, y\n    image.composite( src, x, y ); // composites another Jimp image over this iamge at x, y\n    image.brightness( val ); // adjust the brighness by a value -1 to +1\n    image.contrast( val ); // adjust the contrast by a value -1 to +1\n    image.posterize( n ); // apply a posterization effect with n level\n\n(Contributions of more methods are welcome!)\n\nThe image can be written to disk in PNG, JPEG or BMP format (determined by the file extension) using:\n\n    image.write( path, cb ); // Node-style callback will be fired when write is successful\n\nThe quality of saved JPEGs can be set with:\n\n    image.quality( n ); // set the quality of saved JPEG, 0 - 100\n\n## Cloning images ##\n\nTo clone a Jimp image, you can use:\n\n    image.clone(); // returns the clone\n\nThe Jimp constructor can also be called using an existing image create a clone of that image:\n\n    var clone = new Jimp(image, function (err, clone) {\n        // this is the clone\n    });\n\n## Working with Buffers ##\n\nA PNG, JPEG or BMP binary Buffer of an image (e.g. for storage in a database) can to got using:\n\n    image.getBuffer( mime, cb ); // Node-style callback wil be fired with result\n\nFor convenience, supported MIME types are available as static properties:\n\n    Jimp.MIME_PNG; // \"image/png\"\n    Jimp.MIME_JPEG; // \"image/jpeg\"\n    Jimp.BMP; // \"image/bmp\"\n\nThe Jimp constructor can also be called passing a valid Buffer as the first argument to the Jimp constructor:\n\n    var image = new Jimp(buffer, function (err, image) {\n        // this is the image\n    });\n\n## Direct manipulation ##\n\nJimp enables low-level manipulation of images in memory through the bitmap property of each Jimp object:\n\n    image.bitmap.data; // a Buffer of the raw bitmap data\n    image.bitmap.width; // the width of the image\n    image.bitmap.height // the height of the image\n\nThis data can be manipulated directly but remember: garbage in, garbage out.\n\nA helper method is available to scan a region of the bitmap:\n\n    image.scan(x, y, w, h, cb); // scan a given region of the bitmap and call cb on every pixel\n    \nExample usage:\n\n    image.scan(0, 0, image.bitmap.width, image.bitmap.height, function (x, y, idx) {\n        // x, y is the position of this pixel on the image\n        // idx is the position start position of this rgba tuple in the bitmap Buffer\n        // this is the image\n        \n        var red = this.bitmap.data[idx];\n        var green = this.bitmap.data[idx+1];\n        var blue = this.bitmap.data[idx+2];\n        var alpha = this.bitmap.data[idx+3];\n        \n        // rgba values run from 0 - 255\n        // e.g. this.bitmap.data[idx] = 0; // removes red from this pixel\n    });\n\nIf you want to begin with an empty Jimp image, you can call the Jimp constructor passing the width and height of the image to create:\n\n    var image = new Jimp(256, 256, function (err, image) {\n        // this image is 256 x 256, every pixel is set to 0x0\n    });\n\n## Chaining or callbacks ##\n\nAll methods can be chained together, for example as follows:\n\n    var lenna = new Jimp(\"lenna.png\", function (err, image) {\n        this.greyscale().scale(0.5).write(\"lena-half-bw.png\");\n    });\n\nAlternatively, methods can be passed Node-style callbacks:\n\n    var lenna = new Jimp(\"lenna.png\", function (err, image) {\n        image.greyscale(function(err, image) {\n            image.scale(0.5, function (err, image) {\n                image.write(\"lena-half-bw.png\");\n            });\n        });\n    });\n\nThe Node-style callback pattern allows Jimp to be used with frameworks that expect or build on the Node-style callback pattern.\n\n## License ##\n\nJimp is licensed under the MIT license.\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/oliver-moran/jimp",
  "_id": "jimp@0.2.4",
  "_from": "jimp@^0.2.4"
}
